-- Create bottles table
create table if not exists public.bottles (
  id bigint generated by default as identity primary key,
  type text not null,
  unit text not null,
  price numeric(10, 2) not null,
  quantity integer not null,
  date date not null default now(),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  user_id uuid references auth.users(id) not null
);

-- Enable Row Level Security
alter table public.bottles enable row level security;

-- Create policies
create policy "Users can view their own bottles" 
on public.bottles for select 
using (auth.uid() = user_id);

create policy "Users can insert their own bottles" 
on public.bottles for insert 
with check (auth.uid() = user_id);

create policy "Users can update their own bottles" 
on public.bottles for update 
using (auth.uid() = user_id);

create policy "Users can delete their own bottles" 
on public.bottles for delete 
using (auth.uid() = user_id);

-- Create a function to update the updated_at column
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql security definer;

-- Create a trigger to update the updated_at column
create trigger update_bottles_updated_at
before update on public.bottles
for each row
execute function update_updated_at_column();
